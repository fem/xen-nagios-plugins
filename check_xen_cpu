#!/usr/bin/env python2
# check_xen_cpu
# Reports CPU Usage for Xen VMs
# Author: Anton Schubert <ischluff@mailbox.org>
# Version: 2.1
# Changelog:
#   2016-06-13 - 1.0 - Initial version
#   2017-07-08 - 1.1 - Handle counter rollover
#   2017-07-17 - 2.0 - Use history-file instead of sampling approach
#   2017-07-23 - 2.1 - Only initialize xenstat handle for VCPU stats
# Copyright (c) 2017

import os, sys, time, argparse, math, json
from enum import IntEnum
from xenstat import *

class Status(IntEnum):
    OK = 0
    WARNING = 1
    CRITICAL = 2
    UNKNOWN = 3

def get_domains(node):
    count = xenstat_node_num_domains(node)
    return map(lambda i: xenstat_node_domain_by_index(node, i), range(count))

def get_domain_names(domains):
    return map(lambda d: xenstat_domain_name(d), domains)

def get_domain_times(domains):
    return map(lambda d: xenstat_domain_cpu_ns(d), domains)

def get_domain_cpus(domains):
    return map(lambda d: xenstat_domain_num_vcpus(d), domains)

def cputime_to_percent(sample1, sample2, diff):
    # handle rollover
    if (sample2 < sample1):
        estimated_max = 2**math.ceil(math.log(sample1)/math.log(2))
        sample1 -= estimated_max

    return (sample2 - sample1) / (diff * 10.0e6)

def diff_results(samples1, samples2, diff):
    results = []
    for name,value in samples2:
        for other_name,other_value in samples1:
            if other_name == name:
                results.append((name, cputime_to_percent(other_value, value, diff)))
                continue

    return results

# output total usage + usage per vm
def get_perfdata(num_cpus, names, cpus, results, diff):
    total = sum(x[1] for x in results)
    perfdata = "Total Usage = {:.2f}% in {:.0f}s, CPUs = {:d}|total={:.2f}%;;;0;{:d}".format(total, diff, num_cpus, total, num_cpus * 100)
    for i in range(len(names)):
        for name,value in results:
            if name == names[i]:
                perfdata += " domain_{:}={:.2f}%;;;0;{:d}".format(name, value, cpus[i] * 100)
                continue
    return perfdata

# nagios compatible exit
def exit_status(status, perfdata="", message=None,):
    if message is not None:
        print("CPU {:} - {:}".format(status.name, message))
    else:
        print("CPU {:} - {:}".format(status.name, perfdata))

    sys.exit(status.value)

def main():
    histfile = "/tmp/.check_xen_cpu"
    parser = argparse.ArgumentParser(description="Reports CPU Usage for xen VMs")
    args = parser.parse_args()

    # initialize handle
    handle = xenstat_init()
    status = Status.OK
    message = ""
    previous_sample = None
    past = None

    # prevent access without handle
    if handle is None:
        exit_status(Status.UNKNOWN, "Failed to get xenstat handle, you are probably not root")

    # sample cpu usage
    node = xenstat_get_node(handle, XENSTAT_VCPU)
    domains = get_domains(node)
    sample = zip(get_domain_names(domains), get_domain_times(domains))
    now = time.time()

    # load history file
    try:
        stat = os.stat(histfile)
        past = stat.st_mtime
        with open(histfile) as f:
            previous_sample = json.load(f)

    except (IOError,OSError) as e:
        if e.errno == os.errno.ENOENT:
            status, message = Status.UNKNOWN, "History file not written yet"
        else:
            status, message = Status.UNKNOWN, "Failed to read the history file - {:}".format(e.strerror)

    # write history file
    try:
        with open(histfile, 'w') as f:
            json.dump(sample, f)
    except (IOError,OSError) as e:
        status, message = Status.UNKNOWN, "Could not write history file - {:}".format(e.strerror)

    # early exit on errors
    if status > Status.OK:
        exit_status(status, message)

    # compute values
    results = diff_results(previous_sample, sample, now - past)

    # get additional info
    num_cpus = xenstat_node_num_cpus(node)
    names = get_domain_names(domains)
    cpus = get_domain_cpus(domains)
    xenstat_uninit(handle)

    # generate output
    exit_status(Status.OK, get_perfdata(num_cpus, names, cpus, results, now - past))

if __name__ == "__main__":
    main()
